// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFood = `-- name: CreateFood :one
INSERT INTO foods (name, price)
VALUES ($1, $2)
RETURNING id, name, price, created_at, updated_at
`

type CreateFoodParams struct {
	Name  string
	Price int32
}

func (q *Queries) CreateFood(ctx context.Context, arg CreateFoodParams) (Food, error) {
	row := q.db.QueryRow(ctx, createFood, arg.Name, arg.Price)
	var i Food
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createNode = `-- name: CreateNode :one
INSERT INTO nodes (key, name, ip, type)
VALUES ($1, $2, $3, $4)
RETURNING id, key, name, ip, type, is_review, created_at, updated_at
`

type CreateNodeParams struct {
	Key  pgtype.Text
	Name string
	Ip   *netip.Addr
	Type NodeType
}

func (q *Queries) CreateNode(ctx context.Context, arg CreateNodeParams) (Node, error) {
	row := q.db.QueryRow(ctx, createNode,
		arg.Key,
		arg.Name,
		arg.Ip,
		arg.Type,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Name,
		&i.Ip,
		&i.Type,
		&i.IsReview,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
